// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/auth/database/repository.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/reezanvisram/allergeye/pharmacist/pkg/auth/database/models"
)

// AuthRepository is a mock of Repository interface.
type AuthRepository struct {
	ctrl     *gomock.Controller
	recorder *AuthRepositoryMockRecorder
}

// AuthRepositoryMockRecorder is the mock recorder for AuthRepository.
type AuthRepositoryMockRecorder struct {
	mock *AuthRepository
}

// NewAuthRepository creates a new mock instance.
func NewAuthRepository(ctrl *gomock.Controller) *AuthRepository {
	mock := &AuthRepository{ctrl: ctrl}
	mock.recorder = &AuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *AuthRepository) EXPECT() *AuthRepositoryMockRecorder {
	return m.recorder
}

// CheckPasswordHash mocks base method.
func (m *AuthRepository) CheckPasswordHash(password, hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPasswordHash", password, hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPasswordHash indicates an expected call of CheckPasswordHash.
func (mr *AuthRepositoryMockRecorder) CheckPasswordHash(password, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPasswordHash", reflect.TypeOf((*AuthRepository)(nil).CheckPasswordHash), password, hash)
}

// GetUserByEmail mocks base method.
func (m *AuthRepository) GetUserByEmail(email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *AuthRepositoryMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*AuthRepository)(nil).GetUserByEmail), email)
}

// HashPassword mocks base method.
func (m *AuthRepository) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *AuthRepositoryMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*AuthRepository)(nil).HashPassword), password)
}

// InsertUser mocks base method.
func (m *AuthRepository) InsertUser(email, firstName, lastName, password string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", email, firstName, lastName, password)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *AuthRepositoryMockRecorder) InsertUser(email, firstName, lastName, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*AuthRepository)(nil).InsertUser), email, firstName, lastName, password)
}

// UserExistsWithEmail mocks base method.
func (m *AuthRepository) UserExistsWithEmail(email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExistsWithEmail", email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UserExistsWithEmail indicates an expected call of UserExistsWithEmail.
func (mr *AuthRepositoryMockRecorder) UserExistsWithEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExistsWithEmail", reflect.TypeOf((*AuthRepository)(nil).UserExistsWithEmail), email)
}
